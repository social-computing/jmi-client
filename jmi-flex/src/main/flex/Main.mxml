<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               xmlns:wps="com.socialcomputing.wps.components.*"
               creationComplete="onCreationComplete(event)">
    <fx:Style source="Main.css"/>
    <fx:Script>
        <![CDATA[
			import com.socialcomputing.wps.components.events.*;
			import com.socialcomputing.wps.script.ActiveZone;
			import com.socialcomputing.wps.services.planservice.PlanService;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.codec.PNGEncoder;
			import mx.utils.Base64Encoder;
			
			import ru.inspirit.net.MultipartURLLoader;
			
			import spark.effects.Fade;
	
            private var planService:PlanService;
			private var waiterUrl:String;
			
			// JS Callbacks
			private var mainCallback:String;
			private var readyCallback:String, emptyCallback:String, errorCallback:String, statusCallback:String, navigateCallback:String;
			
            protected function onCreationComplete(event:FlexEvent):void {
				// Reading application properties
				var serverURL:String = this.checkApplicationParameter("wpsserverurl");
				this.checkApplicationParameter("wpsplanname");
				var parameters:Object = FlexGlobals.topLevelApplication.parameters;
				this.waiterUrl = FlexGlobals.topLevelApplication.parameters["waiterurl"]

				// Security Sandbox
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "allowDomain")) {
					Security.allowDomain( FlexGlobals.topLevelApplication.parameters["allowDomain"]);
					Security.allowInsecureDomain( FlexGlobals.topLevelApplication.parameters["allowDomain"]);
				}
				
				// CallBacks
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "mainCallback")) 
					mainCallback = FlexGlobals.topLevelApplication.parameters["mainCallback"];
				else {
					if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "readyCallback")) 
						readyCallback = FlexGlobals.topLevelApplication.parameters["readyCallback"];
					else
						readyCallback = "ready";
					if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "emptyCallback")) 
						emptyCallback = FlexGlobals.topLevelApplication.parameters["emptyCallback"];
					else
						emptyCallback = "empty";
					if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "errorCallback")) 
						errorCallback = FlexGlobals.topLevelApplication.parameters["errorCallback"];
					else
						errorCallback = "error";
					if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "statusCallback")) 
						statusCallback = FlexGlobals.topLevelApplication.parameters["statusCallback"];
					else
						statusCallback = "status";
					if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "navigateCallback")) 
						navigateCallback = FlexGlobals.topLevelApplication.parameters["navigateCallback"];
					else
						navigateCallback = "navigate";
				}
				
				// for js calls
				ExternalInterface.addCallback( "compute", compute);
				ExternalInterface.addCallback( "getProperty", getProperty);
				ExternalInterface.addCallback( "getArrayProperty", getArrayProperty);
				ExternalInterface.addCallback( "uploadAsImage", uploadAsImage);
				ExternalInterface.addCallback( "getImage", getImage);
				ExternalInterface.addCallback( "getAttributesCount", getAttributesCount);
				ExternalInterface.addCallback( "getAttribute", getAttribute);
				ExternalInterface.addCallback( "getLinksCount", getLinksCount);
				ExternalInterface.addCallback( "getLink", getLink);
				ExternalInterface.addCallback( "getSelections", getSelections);
				ExternalInterface.addCallback( "showSelection", showSelection);
				ExternalInterface.addCallback( "clearSelection", clearSelection);
				ExternalInterface.addCallback( "addSelection", addSelection);
				ExternalInterface.addCallback( "setSelection", setSelection);
				
				// Initialising service
				this.planService = new PlanService(serverURL);
				computeMap( true, parameters);
            }
			
			private function checkApplicationParameter(paramName:String):String {
				if(!FlexGlobals.topLevelApplication.parameters.hasOwnProperty(paramName)) {
					throw new Error("Missing application parameter: " + paramName); 
				}
				return FlexGlobals.topLevelApplication.parameters[paramName];
			}
			
			public function compute(parameters:Object):void {
				computeMap( false, parameters);
 			}
			
			private function computeMap(initial:Boolean, parameters:Object):void {
				showWaiter( initial);
				getPlanResult.token = this.planService.getPlan(parameters.wpsplanname, map.width, map.height, parameters);
			}
			
			public function getProperty( name:String):Object {
				return this.map.getProperty( name);
			}
			public function getArrayProperty( name:String):Array {
				return this.map.getProperty( name) as Array;
			}
			private function _getImage( width:int, height:int, keepProportions:Boolean):ByteArray {
				var encoder:PNGEncoder  = new PNGEncoder();
				if( width == -1) 
					width = map.width;
				if( height == -1) 
					height = map.height;
				var dummyMap:BitmapData = new BitmapData(width, height, false, map.ready ? map.env.m_inCol.m_color : map.backgroundColor);
				var matrix:Matrix = new Matrix();
				if( keepProportions) {
					var dx:Number = width / map.width;
					var dy:Number = height / map.height;
					if( dx < dy) {
						matrix.scale( dx, dx);
						matrix.translate( 0, -((map.height * dx) - height) / 2);
					}
					else {
						matrix.scale( dy, dy);
						matrix.translate( -((map.width * dy) - width) / 2, 0);
					}
				}
				else
					matrix.scale( width / map.width, height / map.height);
				dummyMap.draw( map.bitmapData, matrix);
				return encoder.encode( dummyMap);
			}
			public function getAttributesCount():int {
				return map.plan == null ? 0 : map.plan.m_nodes.length;
			}
			public function getAttribute(index:int):Object {
				if(map.plan == null || index >= map.plan.m_nodes.length)
					return null;
				var attribute:Object = new Object();
				var zone:ActiveZone = map.plan.m_nodes[index];
				for( var o : * in zone.m_props) {
					if( o.charAt( 0) != '_' || o == '_INDEX')
						attribute[o] = zone.m_props[o];
				}
				return attribute;
			}
			public function getLinksCount():int {
				return map.plan == null ? 0 : map.plan.m_links.length;
			}
			public function getLink(index:int):Object {
				if(map.plan == null || index >= map.plan.m_links.length)
					return null;
				var link:Object = new Object();
				var zone:ActiveZone = map.plan.m_links[index];
				for( var o : * in zone.m_props) {
					if( o.charAt( 0) != '_' || o == '_INDEX')
						link[o] = zone.m_props[o];
				}
				return link;
			}
			public function getSelections():Object {
				return map.env == null ? null : map.env.m_selections;
			}
			public function showSelection(selection:String):void {
				map.showSelection(selection);
			}
			public function clearSelection(selection:String):void {
				map.clearSelection(selection);
			}
			public function setSelection(selection:String,attributes:Array,links:Array):void {
				map.clearSelection(selection);
				map.addSelection(selection,attributes,links);
			}
			public function addSelection(selection:String,attributes:Array,links:Array):void {
				map.addSelection(selection,attributes,links);
			}
			// New API
			public function getImage( mime:String="image/png", width:int=-1, height:int=-1, keepProportions:Boolean=true):String {
				var enc:Base64Encoder = new Base64Encoder();    
				enc.encodeBytes( this._getImage( width, height, keepProportions));
				return "data:image/png;base64," + enc.drain();
			}
			// OLD API
			public function uploadAsImage( url:String, name:String, mime:String, width:int, height:int, keepProportions:Boolean, params:Object):void {
				var bphoto:ByteArray = this._getImage( width, height, keepProportions);
				var mploader:MultipartURLLoader = new MultipartURLLoader();
				/*mploader.addEventListener(
					Event.COMPLETE, function onComplete(e:Event):void {
					}
				);*/
				mploader.addFile( bphoto, name, "filedata", "image/png");
				mploader.addVariable( "width", width);
				mploader.addVariable( "height", height);
				mploader.addVariable( "mime", "image/png");
				for(var p:String in params){
					mploader.addVariable( p, params[p]);
				}
				mploader.load( url);
			}
			protected function showWaiter( initial:Boolean):void
			{
				if( waiterUrl) {
					if( initial) {
						var imageLoader:Loader = new Loader();
						imageLoader.load(  new URLRequest(waiterUrl));	
						imageLoader.alpha = 1;
						imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function (e:Event):void {     
							waiter.source = e.currentTarget.content;
							_showWaiter();
						});
					}
					else {
						var fade:Fade = new Fade();
						fade.alphaTo = 0;
						fade.target = map;
						fade.play();
						_showWaiter();
					}
				}
			}
			protected function _showWaiter():void {
				var fade:Fade = new Fade();
				fade.alphaTo = 1;
				fade.target = waiter;
				fade.play();
				waiter.x = (map.width/2) - (waiter.source.width/2) + map.x;
				waiter.y = (map.height/2) - (waiter.source.height/2) + map.y;
				if( waiter.x < 0 ) waiter.x = 0;
				if( waiter.y < 0 ) waiter.y = 0;
			}
			protected function hideWaiter():void
			{
				var fade:Fade = new Fade();
				fade.alphaTo = 1
				fade.target = map;
				fade.play();
			}
			protected function fireEvent(type:String, oldfunctionname:String, event:Object):void {
				if( mainCallback != null) {
					// Canvas compatible version
					var jsevt:Object = {
						type : type
					};
					if( type == com.socialcomputing.wps.components.events.StatusEvent.ERROR)
						jsevt.message = event.status;
					else if( type == com.socialcomputing.wps.components.events.StatusEvent.STATUS)
						jsevt.message = event.status;
					else if( type == ActionEvent.ACTION) {
						jsevt.fn = oldfunctionname;
						jsevt.args = event.args;
					}
					else if( type == NavigateEvent.NAVIGATE) {
						jsevt.url = event.url;
						jsevt.target = event.btarget;
					}
					else if( type == AttributeEvent.CLICK || type == AttributeEvent.DOUBLE_CLICK || type == AttributeEvent.HOVER || type == AttributeEvent.LEAVE) {
						jsevt.attribute = event.attribute._INDEX;
						jsevt.x = event.localX;
						jsevt.y = event.localY;
					}
					else if( type == LinkEvent.CLICK || type == LinkEvent.DOUBLE_CLICK || type == LinkEvent.HOVER || type == LinkEvent.LEAVE) {
						jsevt.link = event.link.m_props._INDEX;
						jsevt.x = event.localX;
						jsevt.y = event.localY;
					}
					ExternalInterface.call(mainCallback, FlexGlobals.topLevelApplication.id, jsevt);
				}
				else {
					if( type == Map.EMPTY)
						ExternalInterface.call(oldfunctionname);
					if( type == Map.READY)
						ExternalInterface.call(oldfunctionname);
					if( type == com.socialcomputing.wps.components.events.StatusEvent.ERROR)
						ExternalInterface.call(oldfunctionname, event.status);
					if( type == com.socialcomputing.wps.components.events.StatusEvent.STATUS)
						ExternalInterface.call(oldfunctionname, event.status);
					if( type == NavigateEvent.NAVIGATE)
						ExternalInterface.call(oldfunctionname, event.url, event.btarget);
					if( type == ActionEvent.ACTION)
						ExternalInterface.call(oldfunctionname, event.args);
				}
			}
	]]>
    </fx:Script>
    
    <fx:Declarations>
        <s:CallResponder id="getPlanResult"
						 fault="fireEvent(com.socialcomputing.wps.components.events.StatusEvent.ERROR, errorCallback, {status: event.fault.faultString});"
						 />
    </fx:Declarations>

	<mx:Canvas id="main" width="100%" height="100%">
		<mx:Image id="waiter" alpha="1" />
		<wps:Map id="map" alpha="0"
				backgroundColor="{this.getStyle('contentBackgroundColor')}"
				dataProvider="{getPlanResult.lastResult}" 
				ready="hideWaiter();fireEvent(Map.READY, readyCallback, null);"
				empty="hideWaiter();fireEvent(Map.EMPTY, emptyCallback, null);"
				error="hideWaiter();fireEvent(com.socialcomputing.wps.components.events.StatusEvent.ERROR, errorCallback, event);"
				status="fireEvent(com.socialcomputing.wps.components.events.StatusEvent.STATUS, statusCallback, event);"
				action="fireEvent(ActionEvent.ACTION, event.action, event);" 
				navigate="fireEvent(NavigateEvent.NAVIGATE, navigateCallback, event);"
				attribute_click="fireEvent(AttributeEvent.CLICK, null, event);"
				attribute_dblclick="fireEvent(AttributeEvent.DOUBLE_CLICK, null, event);"
				attribute_hover="fireEvent(AttributeEvent.HOVER, null, event);"
				link_click="fireEvent(LinkEvent.CLICK, null, event);"
				link_dblclick="fireEvent(LinkEvent.DOUBLE_CLICK, null, event);"
				link_hover="fireEvent(LinkEvent.HOVER, null, event);"
				percentWidth="100"
				percentHeight="100"
		/>
	</mx:Canvas>
</s:Application>
