<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               xmlns:wps="com.socialcomputing.wps.components.*"
               creationComplete="onCreationComplete(event)">
	<fx:Style source="jmi.css" />
    <fx:Script>
        <![CDATA[
			import br.com.stimuli.loading.BulkLoader;
			
			import com.adobe.serialization.json.JSON;
			import com.brokenfunction.json.decodeJson;
			import com.socialcomputing.wps.components.Attribute;
			import com.socialcomputing.wps.components.events.ActionEvent;
			import com.socialcomputing.wps.components.events.StatusEvent;
			import com.socialcomputing.wps.services.planservice.PlanService;
			
			import flash.external.ExternalInterface;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.codec.PNGEncoder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import ru.inspirit.net.MultipartURLLoader;
			
			import spark.effects.Fade;
			import spark.events.IndexChangeEvent;
			
            private var planName:String;
            private var planService:PlanService;

			[Bindable]
			[Embed(source="preloaderXML2.swf")]
			private var preloadMessages:Class;
			
			[Bindable]
			public var types:ArrayCollection = new ArrayCollection(
				[ {type:"friends", single:"a friend"},
					{type:"likes", single:"like"},
					{type:"movies", single:"a movie"},
					{type:"music", single:"music"},
					{type:"books", single:"a book"},
					//{type:"notes", single:"a note"},
					{type:"photos", single:"a photo"},
					{type:"videos", single:"a video"},
					{type:"events", single:"an event"},
					{type:"groups", single:"a group"}
					//{type:"checkins", single:"a checkin"}
				]);
			
            protected function onCreationComplete(event:FlexEvent):void {
				// Default
				this.type.selectedIndex = 1;
					
				// Reading application properties
				var serverURL:String = this.checkApplicationParameter("wpsserverurl");
				this.planName = this.checkApplicationParameter("wpsplanname");
				//var parameters:Object = FlexGlobals.topLevelApplication.parameters;
/* 				if( parameters["fbuserid"] != null && parameters["fbuserid"] != "") {
					parameters["attributeId"] = parameters["fbuserid"];
					parameters["analysisProfile"] = "DiscoveryProfile";
				}
 */				
				// Initialising service
				this.planService = new PlanService(serverURL);
				computeMap( true);
			}
			
			private function checkApplicationParameter(paramName:String):String {
				if(!FlexGlobals.topLevelApplication.parameters.hasOwnProperty(paramName)) {
					throw new Error("Missing application parameter: " + paramName); 
				}
				return FlexGlobals.topLevelApplication.parameters[paramName];
			}
			
			private function computeMap( initial:Boolean):void {
				showWaiterMessages( initial);
				//type.enabled = false;
				if( parameters["kind"] == null)
					parameters["kind"] = "likes";
/* 				friends.enabled = false;
				items.enabled = false;
 */				photo.enabled = false;
 				tag.enabled = false;
				getPlanResult.token = planService.getPlan(planName, map.width, map.height, parameters);
			}
			
			private function onInit():void {
				var sort:Sort = new Sort();
				map.defineEntities(["POSS_NAME"]);
				sort.fields = [new SortField("POSS_NAME", false)];
				map.entities.sort = sort;
				map.entities.refresh();
/* 				items.dataProvider = map.entities;
				items.visible = true;
				items.enabled = true;
				itemsLabel.text = "Select " + type.selectedItem.single;
				itemsLabel.visible = true;
 */				
				if( parameters["kind"] != "friends") {
					sort = new Sort();
					sort.fields = [new SortField("NAME", false)];
					map.attributes.sort = sort;
					map.attributes.refresh();
/* 					friends.dataProvider = map.attributes;
					friends.visible = true;
					friends.enabled = true;
					friendsLabel.visible = true;
 */				}
				else {
/* 					friends.visible = false;
					friends.enabled = false;
					friendsLabel.visible = false;
 */				}
				type.enabled = true;
				photo.visible = true;
				photo.enabled = true;
				tag.visible = true;
				tag.enabled = true;
				hideWaiterMessages();
			}
            
			private function onEmpty():void {
				hideWaiterMessages();
				Alert.show("Sorry, the map is empty");
				type.enabled = true;
			}
			private function onError(event:com.socialcomputing.wps.components.events.StatusEvent):void {
				hideWaiterMessages();
				Alert.show( event.status);
				type.enabled = true;
			}
			
			protected function onAction(event:ActionEvent):void
			{
				if( event.action == "Discover") {
					parameters["attributeId"] = event.args[0];
					parameters["analysisProfile"] = "DiscoveryProfile";
					parameters["kind"] = type.selectedItem.type;
					computeMap( false);
				}
				if( event.action == "Display") {
					displayFBLink( event.args[0]);
				}
			}
			
            private function selectType(event:IndexChangeEvent):void { 
				if( !type.selectedItem) return;
				if( false) {//type.selectedItem.type != "friends" && map.getProperty("$MY_FB_ID")) {
					parameters["attributeId"] = map.getProperty("$MY_FB_ID");
					parameters["analysisProfile"] = "DiscoveryProfile";
				}
				else {
	                parameters["analysisProfile"] = "GlobalProfile";
				}
				parameters["kind"] = type.selectedItem.type;
				computeMap( false);
            }
            
            private function selectFriend(event:IndexChangeEvent):void {
                map.clearSelection( "search");
//				friends.selectedItem.select( "search");
                map.setSelection( "search");
//				items.selectedItem = null;
            }
			
			private function selectItem(event:IndexChangeEvent):void {
				map.clearSelection( "search");
/* 				items.selectedItem.select( "search");
				for each( var attribute:Attribute in items.selectedItem.attributes) {
					attribute.select( "search");
				}
 */				map.setSelection( "search");
//				friends.selectedItem = null;
			}
			
			private function displayFBLink( id:String):void {
				var url:String = "https://graph.facebook.com/" + id;
				var loader:BulkLoader = new BulkLoader();
				loader.addEventListener(
					BulkLoader.COMPLETE,
					function(event:Event):void {
						var json:String = loader.getText( url);
						var jso:Object = decodeJson( json);
						var link:String;
						if( jso && jso.hasOwnProperty( "link"))
							link = jso[ "link"] as String;
						else
							link = "http://www.facebook.com/profile.php?id=" + id;
						//navigateToURL( new URLRequest( link), "_blank");
						ExternalInterface.call('navigate', link, "_blank");
					});
				loader.add( url, {type:"text"});
				loader.start();
			}
			
			private function uploadAsPhoto( doTag:Boolean): void {
				photo.enabled = false;
				tag.enabled = false;
				var name:String = "My friends sharing " + type.selectedItem.type;
				var encoder:PNGEncoder  = new PNGEncoder();
				var bphoto:ByteArray = encoder.encode( map.bitmapData);
				var mploader:MultipartURLLoader = new MultipartURLLoader();
				mploader.addEventListener(
					Event.COMPLETE, 
					function onComplete(e:Event):void {
						var jso:Object = decodeJson( mploader.getData());
						if( doTag && jso.hasOwnProperty( "id")) {
							tagUsersInPhoto( jso["id"]);
						}
						photo.enabled = true;
						tag.enabled = true;
					});
				mploader.addVariable( "access_token", map.getProperty( "$access_token"));
				mploader.addFile( bphoto, "just-map-it.png", "filedata", "image/png");
				mploader.load( "https://graph.facebook.com/" + map.getProperty("$MY_FB_ID") + "/photos");
			}
			
			private function tagUsersInPhoto( photo:String): void {
				for each( var user:Attribute in map.attributes) {
					tagUserInPhoto( photo, user);
				}
			}
			
			private function tagUserInPhoto( photo:String, user:Attribute): void {
				if( user.hasOwnProperty( "_VERTICES")) {
					var x:int = user._VERTICES[0].x - 10;
					var y:int = user._VERTICES[0].y - 10;
					var mploader:MultipartURLLoader = new MultipartURLLoader();
					mploader.addEventListener(
						Event.COMPLETE, 
						function onReady(e:Event):void {
							//Alert.show( "ok");
						});
					mploader.addVariable( "access_token", map.getProperty( "$access_token"));
					mploader.addVariable( "x", int( x * 100 /map.width));
					mploader.addVariable( "y", int( y * 100 /map.height));
					mploader.load( "https://graph.facebook.com/" + photo + "/tags/" + user.ID);
				}
			}
			protected function showWaiterMessages( initial:Boolean):void
			{
				var fade:Fade;
				if( initial) {
				}
				else {
					fade = new Fade();
					fade.alphaTo = 0;
					fade.target = map;
					fade.play();
				}
				fade = new Fade();
				fade.alphaTo = 1;
				fade.target = waiterMessages;
				fade.play();
				waiterMessages.x = (map.width/2) - (waiterMessages.width/2) + map.x;
				waiterMessages.y = (map.height/2) - (waiterMessages.height/2) + map.y;
				if( waiterMessages.x < 0 ) waiterMessages.x = 0;
				if( waiterMessages.y < 0 ) waiterMessages.y = 0;
				
			}
			protected function hideWaiterMessages():void
			{
				var fade:Fade = new Fade();
				fade.alphaTo = 1
				fade.target = map;
				fade.play();
			}
	]]>
    </fx:Script>
    
    <fx:Declarations>
        <s:CallResponder id="getPlanResult"
						 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" />
    </fx:Declarations>
    <s:layout>
        <s:VerticalLayout gap="0" />
    </s:layout>
	<s:HGroup horizontalAlign="left" verticalAlign="bottom" paddingBottom="5">
		<s:ButtonBar id="type" height="30" labelField="type" dataProvider="{types}" change="selectType(event);" selectedIndex="0" />
		<s:Button id="photo" height="30" label="Upload photo" click="uploadAsPhoto( tag.selected);" visible="false"/>	
		<s:CheckBox id="tag" label="Tag friends" selected="false" visible="false"/>
	</s:HGroup>
	<mx:Canvas width="100%" height="100%">
	<mx:Image id="waiterMessages" alpha="1" source="{preloadMessages}" />
	<wps:Map id="map"
			alpha="0"
			backgroundColor="#FFFFFF"
			dataProvider="{getPlanResult.lastResult}" 
			ready="onInit();"
			empty="onEmpty()"
			error="onError(event);"
			action="onAction(event);" 
			percentWidth="100"
			percentHeight="100"
	/>
	</mx:Canvas>
</s:Application>
