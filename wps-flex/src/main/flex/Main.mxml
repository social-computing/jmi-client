<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               xmlns:wps="com.socialcomputing.wps.components.*"
               creationComplete="onCreationComplete(event)">
    <fx:Style source="Main.css"/>
    <fx:Script>
        <![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.socialcomputing.wps.components.Attribute;
			import com.socialcomputing.wps.components.events.ActionEvent;
			import com.socialcomputing.wps.services.planservice.PlanService;
			
			import flash.external.ExternalInterface;
			import flash.system.Security;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
            private var planName:String;
            private var planService:PlanService;
			
			// JS Callbacks
			private var readyCallback:String, emptyCallback:String, errorCallback:String, statusCallback:String, navigateCallback:String;
			
            protected function onCreationComplete(event:FlexEvent):void {
				
				// Reading application properties
				var serverURL:String = this.checkApplicationParameter("wpsserverurl");
				this.planName = this.checkApplicationParameter("wpsplanname");
				var parameters:Object = FlexGlobals.topLevelApplication.parameters;

				// Security Sandbox
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "allowDomain")) {
					Security.allowDomain( FlexGlobals.topLevelApplication.parameters["allowDomain"]);
				}
				
				// CallBacks
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "readyCallback")) 
					readyCallback = FlexGlobals.topLevelApplication.parameters["readyCallback"];
				else
					readyCallback = "ready";
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "emptyCallback")) 
					emptyCallback = FlexGlobals.topLevelApplication.parameters["emptyCallback"];
				else
					emptyCallback = "empty";
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "errorCallback")) 
					errorCallback = FlexGlobals.topLevelApplication.parameters["errorCallback"];
				else
					errorCallback = "error";
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "statusCallback")) 
					statusCallback = FlexGlobals.topLevelApplication.parameters["statusCallback"];
				else
					statusCallback = "status";
				if( FlexGlobals.topLevelApplication.parameters.hasOwnProperty( "navigateCallback")) 
					navigateCallback = FlexGlobals.topLevelApplication.parameters["navigateCallback"];
				else
					navigateCallback = "navigate";
				
				// for js calls
				ExternalInterface.addCallback( "compute", compute);
				ExternalInterface.addCallback( "getProperty", getProperty);
				ExternalInterface.addCallback( "getArrayProperty", getArrayProperty);
				
				// Initialising service
				this.planService = new PlanService(serverURL);
                getPlanResult.token = this.planService.getPlan(planName, map.width, map.height, parameters);
            }
			
			private function checkApplicationParameter(paramName:String):String {
				if(!FlexGlobals.topLevelApplication.parameters.hasOwnProperty(paramName)) {
					throw new Error("Missing application parameter: " + paramName); 
				}
				return FlexGlobals.topLevelApplication.parameters[paramName];
			}
			
			public function compute(parameters:Object):void {
				getPlanResult.token = this.planService.getPlan(planName, map.width, map.height, parameters);
 			}
			
			public function getProperty( name:String):String {
				return this.map.getProperty( name) as String;
			}
			public function getArrayProperty( name:String):Array {
				return this.map.getProperty( name) as Array;
			}
	]]>
    </fx:Script>
    
    <fx:Declarations>
        <s:CallResponder id="getPlanResult"
						 fault="ExternalInterface.call('error', event.fault.faultString);" />
    </fx:Declarations>

	<wps:Map id="map"
			backgroundColor="{this.getStyle('contentBackgroundColor')}"
			dataProvider="{getPlanResult.lastResult}" 
			ready="ExternalInterface.call(readyCallback);"
			empty="ExternalInterface.call(emptyCallback);"
			error="ExternalInterface.call(errorCallback, event.status);"
			status="ExternalInterface.call(statusCallback, event.status);"
			action="ExternalInterface.call(event.action, event.args);" 
			navigate="ExternalInterface.call(navigateCallback, event.url, event.btarget);"
			percentWidth="100"
			percentHeight="100"
	/>
</s:Application>
